/**
 * Flowtype definitions for nacl
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.3
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface nacl$BoxKeyPair {
  publicKey: Uint8Array;
  secretKey: Uint8Array;
}

declare interface nacl$SignKeyPair {
  publicKey: Uint8Array;
  secretKey: Uint8Array;
}

declare interface nacl$secretbox {
  (msg: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array;
  open(box: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array | null;
  keyLength: number;
  nonceLength: number;
  overheadLength: number;
}

declare interface nacl$scalarMult {
  (n: Uint8Array, p: Uint8Array): Uint8Array;
  base(n: Uint8Array): Uint8Array;
  scalarLength: number;
  groupElementLength: number;
}

declare interface box$open {
  (
    msg: Uint8Array,
    nonce: Uint8Array,
    publicKey: Uint8Array,
    secretKey: Uint8Array
  ): Uint8Array | null;
  after(box: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array | null;
}

declare interface box$keyPair {
  (): nacl$BoxKeyPair;
  fromSecretKey(secretKey: Uint8Array): nacl$BoxKeyPair;
  (): nacl$SignKeyPair;
  fromSecretKey(secretKey: Uint8Array): nacl$SignKeyPair;
  fromSeed(secretKey: Uint8Array): nacl$SignKeyPair;
}

declare interface nacl$box {
  (
    msg: Uint8Array,
    nonce: Uint8Array,
    publicKey: Uint8Array,
    secretKey: Uint8Array
  ): Uint8Array;
  before(publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array;
  after(msg: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array;
  open: box$open;
  keyPair: box$keyPair;
  publicKeyLength: number;
  secretKeyLength: number;
  sharedKeyLength: number;
  nonceLength: number;
  overheadLength: number;
}

declare interface sign$detached {
  (msg: Uint8Array, secretKey: Uint8Array): Uint8Array;
  verify(msg: Uint8Array, sig: Uint8Array, publicKey: Uint8Array): boolean;
}

declare interface sign$keyPair {
  (): nacl$BoxKeyPair;
  fromSecretKey(secretKey: Uint8Array): nacl$BoxKeyPair;
  (): nacl$SignKeyPair;
  fromSecretKey(secretKey: Uint8Array): nacl$SignKeyPair;
  fromSeed(secretKey: Uint8Array): nacl$SignKeyPair;
}

declare interface nacl$sign {
  (msg: Uint8Array, secretKey: Uint8Array): Uint8Array;
  open(signedMsg: Uint8Array, publicKey: Uint8Array): Uint8Array | null;
  detached: sign$detached;
  keyPair: sign$keyPair;
  publicKeyLength: number;
  secretKeyLength: number;
  seedLength: number;
  signatureLength: number;
}

declare interface nacl$hash {
  (msg: Uint8Array): Uint8Array;
  hashLength: number;
}
declare export var nacl: {
  randomBytes(n: number): Uint8Array,
  secretbox: nacl$secretbox,
  scalarMult: nacl$scalarMult,
  box: nacl$box,
  sign: nacl$sign,
  hash: nacl$hash,
  verify(x: Uint8Array, y: Uint8Array): boolean,
  setPRNG(fn: (x: Uint8Array, n: number) => void): void
};
